#version 330

in vec3 vertex_position;
in vec3 vertex_normal;



vec4 LightPosition = vec4 (10.0, 10.0, 4.0, 1.0); // Light position in world coords.

vec3 Ks = vec3 (1.0, 1.0, 1.0); // fully reflect specular light
vec3 Kd= vec3 (0.0, 0.8, 0.0); // green
vec3 Ka= vec3 (1.0, 1.0, 1.0); // fully reflect ambient light
float specular_exponent= 100.0; // specular 'power'

vec3 Ls = vec3 (0.0, 0.0, 0.0); // white specular colour
vec3 Ld = vec3 (0.7, 0.7, 0.7); // dull white diffuse light colour
vec3 La = vec3 (0.2, 0.2, 0.2); // grey ambient colour

out vec3 LightIntensity;


uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;



in vec2 vt; // per-vertex texture co-ords
out vec2 texture_coordinates;


void main(){

  texture_coordinates = vt;



  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);
  // Convert normal and position to eye coords
  // Normal in view space
  vec3 tnorm = normalize( NormalMatrix * vertex_normal);
  // Position in view space
  vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);
  //normalised vector towards the light source
  vec3 s = normalize(vec3(LightPosition - eyeCoords));
 

  float dot_prod = max(dot(s, tnorm), 0.0);
  vec3 R  = reflect(-s, tnorm);
  vec3 V = normalize(vec3(-eyeCoords));
  float dot_prod_specular = max(dot(R, V), 0.0);
  float specular_factor = pow(dot_prod_specular, specular_exponent);

  // ambient intensity
  vec3 Ia = La * Ka;
  // diffuse intensity
  vec3 Id = Ld * Kd * dot_prod;
  // specular intensity
  vec3 Is = Ls * Ks * specular_factor;

  // final colour
  //fragment_colour = vec4 (Is + Id + Ia, 1.0);

  LightIntensity = Ia + Id + Is;


  // Convert position to clip coordinates and pass along
  gl_Position = proj * view * model * vec4(vertex_position,1.0);
}


  